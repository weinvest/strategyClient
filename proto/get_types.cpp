/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "get_types.h"

#include <algorithm>



int _kGetStatusValues[] = {
  GetStatus::Success,
  GetStatus::NoSuchUser,
  GetStatus::PasswordWrong,
  GetStatus::TooManyTimes,
  GetStatus::NoData,
  GetStatus::Exception,
  GetStatus::NotSupported
};
const char* _kGetStatusNames[] = {
  "Success",
  "NoSuchUser",
  "PasswordWrong",
  "TooManyTimes",
  "NoData",
  "Exception",
  "NotSupported"
};
const std::map<int, const char*> _GetStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kGetStatusValues, _kGetStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* GetRequest::ascii_fingerprint = "EC8C8E8D6042A67E4AF0F04DA3F39A73";
const uint8_t GetRequest::binary_fingerprint[16] = {0xEC,0x8C,0x8E,0x8D,0x60,0x42,0xA6,0x7E,0x4A,0xF0,0xF0,0x4D,0xA3,0xF3,0x9A,0x73};

uint32_t GetRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->Type = ( ::ResType::type)ecast0;
          this->__isset.Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->UserName);
          this->__isset.UserName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Password);
          this->__isset.Password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->TradingDay);
          this->__isset.TradingDay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetRequest");

  xfer += oprot->writeFieldBegin("Type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UserName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->UserName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Password", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TradingDay", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->TradingDay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetRequest &a, GetRequest &b) {
  using ::std::swap;
  swap(a.Type, b.Type);
  swap(a.UserName, b.UserName);
  swap(a.Password, b.Password);
  swap(a.TradingDay, b.TradingDay);
  swap(a.__isset, b.__isset);
}

const char* GetResponse::ascii_fingerprint = "C90E77429DA875CCB071C21D6E81A592";
const uint8_t GetResponse::binary_fingerprint[16] = {0xC9,0x0E,0x77,0x42,0x9D,0xA8,0x75,0xCC,0xB0,0x71,0xC2,0x1D,0x6E,0x81,0xA5,0x92};

uint32_t GetResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->Type = ( ::ResType::type)ecast1;
          this->__isset.Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->Status = (GetStatus::type)ecast2;
          this->__isset.Status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Content);
          this->__isset.Content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Key);
          this->__isset.Key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetResponse");

  xfer += oprot->writeFieldBegin("Type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->Status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Content", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Key", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetResponse &a, GetResponse &b) {
  using ::std::swap;
  swap(a.Type, b.Type);
  swap(a.Status, b.Status);
  swap(a.Content, b.Content);
  swap(a.Key, b.Key);
  swap(a.__isset, b.__isset);
}


