/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef get_TYPES_H
#define get_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "common_types.h"




struct GetStatus {
  enum type {
    Success = 0,
    NoSuchUser = 1,
    PasswordWrong = 2,
    TooManyTimes = 3,
    NoData = 4,
    Exception = 5,
    NotSupported = 6
  };
};

extern const std::map<int, const char*> _GetStatus_VALUES_TO_NAMES;

typedef struct _GetRequest__isset {
  _GetRequest__isset() : Type(false), UserName(false), Password(false), TradingDay(false) {}
  bool Type;
  bool UserName;
  bool Password;
  bool TradingDay;
} _GetRequest__isset;

class GetRequest {
 public:

  static const char* ascii_fingerprint; // = "EC8C8E8D6042A67E4AF0F04DA3F39A73";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x8C,0x8E,0x8D,0x60,0x42,0xA6,0x7E,0x4A,0xF0,0xF0,0x4D,0xA3,0xF3,0x9A,0x73};

  GetRequest() : Type(( ::ResType::type)0), UserName(), Password(), TradingDay() {
  }

  virtual ~GetRequest() throw() {}

   ::ResType::type Type;
  std::string UserName;
  std::string Password;
  std::string TradingDay;

  _GetRequest__isset __isset;

  void __set_Type(const  ::ResType::type val) {
    Type = val;
  }

  void __set_UserName(const std::string& val) {
    UserName = val;
  }

  void __set_Password(const std::string& val) {
    Password = val;
  }

  void __set_TradingDay(const std::string& val) {
    TradingDay = val;
  }

  bool operator == (const GetRequest & rhs) const
  {
    if (!(Type == rhs.Type))
      return false;
    if (!(UserName == rhs.UserName))
      return false;
    if (!(Password == rhs.Password))
      return false;
    if (!(TradingDay == rhs.TradingDay))
      return false;
    return true;
  }
  bool operator != (const GetRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetRequest &a, GetRequest &b);

typedef struct _GetResponse__isset {
  _GetResponse__isset() : Type(false), Status(false), Content(false), Key(false) {}
  bool Type;
  bool Status;
  bool Content;
  bool Key;
} _GetResponse__isset;

class GetResponse {
 public:

  static const char* ascii_fingerprint; // = "C90E77429DA875CCB071C21D6E81A592";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x0E,0x77,0x42,0x9D,0xA8,0x75,0xCC,0xB0,0x71,0xC2,0x1D,0x6E,0x81,0xA5,0x92};

  GetResponse() : Type(( ::ResType::type)0), Status((GetStatus::type)0), Content(), Key() {
  }

  virtual ~GetResponse() throw() {}

   ::ResType::type Type;
  GetStatus::type Status;
  std::string Content;
  std::string Key;

  _GetResponse__isset __isset;

  void __set_Type(const  ::ResType::type val) {
    Type = val;
  }

  void __set_Status(const GetStatus::type val) {
    Status = val;
  }

  void __set_Content(const std::string& val) {
    Content = val;
  }

  void __set_Key(const std::string& val) {
    Key = val;
  }

  bool operator == (const GetResponse & rhs) const
  {
    if (!(Type == rhs.Type))
      return false;
    if (!(Status == rhs.Status))
      return false;
    if (!(Content == rhs.Content))
      return false;
    if (!(Key == rhs.Key))
      return false;
    return true;
  }
  bool operator != (const GetResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetResponse &a, GetResponse &b);



#endif
